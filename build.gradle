plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.escola.auth'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2025.0.0")
	mapstructVersion = "1.5.5.Final"
}

springBoot {
	buildInfo()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	// JWT Library: jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
	implementation 'io.leangen.graphql:spqr:0.12.1'

	compileOnly 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Adicione este bloco ao seu build.gradle
bootRun {
	// Verifica se a propriedade 'debug' foi passada na linha de comando (ex: ./gradlew bootRun -Pdebug)
	if (project.hasProperty('debug')) {
		jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005']
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('generateGraphQLSchema', JavaExec) {
	group = "GraphQL"
	description = "Gera o schema.graphqls a partir dos controllers Java."
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'com.escola.auth.util.SchemaGenerator'

	// Adicione esta linha para garantir que o c√≥digo seja compilado primeiro
	dependsOn 'compileJava'
}
